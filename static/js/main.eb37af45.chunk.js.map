{"version":3,"sources":["pokemon.png","models/mock-pokemon.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PokemonList","id","name","hp","cp","picture","types","created","Date","App","useState","pokemon","setPokemon","useEffect","src","pokemonTitle","alt","className","map","key","text-align","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.eb37af45.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokemon.a5b2d57a.png\";","\nconst PokemonList = [\n    {\n        id: 1,\n        name: \"Bulbizarre\",\n        hp: 25,\n        cp: 5,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/001.png\",\n        types: [\"Plante\", \"/Poison\"],\n        created: new Date()\n    },\n    {\n        id: 2,\n        name: \"Salamèche\",\n        hp: 28,\n        cp: 6,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/004.png\",\n        types: [\"Feu\"],\n        created: new Date()\n    },\n    {\n        id: 3,\n        name: \"Carapuce\",\n        hp: 21,\n        cp: 4,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/007.png\",\n        types: [\"Eau\"],\n        created: new Date()\n    },\n    {\n        id: 4,\n        name: \"Aspicot\",\n        hp: 16,\n        cp: 2,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/013.png\",\n        types: [\"Insecte\", \"/Poison\"],\n        created: new Date()\n    },\n    {\n        id: 5,\n        name: \"Roucool\",\n        hp: 30,\n        cp: 7,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/016.png\",\n        types: [\"Normal\", \"/Vol\"],\n        created: new Date()\n    },\n    {\n        id: 6,\n        name: \"Rattata\",\n        hp: 18,\n        cp: 6,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/019.png\",\n        types: [\"Normal\"],\n        created: new Date()\n    },\n    {\n        id: 7,\n        name: \"Piafabec\",\n        hp: 14,\n        cp: 5,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/021.png\",\n        types: [\"Normal\", \"/Vol\"],\n        created: new Date()\n    },\n    {\n        id: 8,\n        name: \"Abo\",\n        hp: 16,\n        cp: 4,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/023.png\",\n        types: [\"Poison\"],\n        created: new Date()\n    },\n    {\n        id: 9,\n        name: \"Pikachu\",\n        hp: 21,\n        cp: 7,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/025.png\",\n        types: [\"Electrick\"],\n        created: new Date()\n    },\n    {\n        id: 10,\n        name: \"Sabelette\",\n        hp: 19,\n        cp: 3,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/027.png\",\n        types: [\"Normal\"],\n        created: new Date()\n    },\n    {\n        id: 11,\n        name: \"Mélofée\",\n        hp: 25,\n        cp: 5,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/035.png\",\n        types: [\"Fée\"],\n        created: new Date()\n    },\n    {\n        id: 12,\n        name: \"Goupix\",\n        hp: 17,\n        cp: 8,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/037.png\",\n        types: [\"Feu\"],\n        created: new Date()\n    },\n    /*{\n        id: 13,\n        name: \"Chasticot\",\n        hp: 50,\n        cp: 18,\n        picture: chasticot,\n        types: [\"Normal\"],\n        created: new Date()\n    },*/\n    \n];\n\nexport default PokemonList;\n\n","import React, { useState, useEffect } from 'react';\nimport PokemonList from './models/mock-pokemon'\nimport pokemonTitle from './pokemon.png';\n\nconst App = () =>  {\n  const [pokemon, setPokemon] = useState([]);\n\n  useEffect(() => {\n    setPokemon(PokemonList);\n  }, []);\n\n  return (\n    <div>\n      <img id=\"pokemon-title\" src={pokemonTitle} alt=\"pokemon-title\"/>\n      <div className=\"container\">\n        <div className=\"row\">\n          {pokemon.map(({id, name, picture, hp, cp, types}) => (\n            <div className=\"col s12 m4\" key={id}>\n              <div className=\"card horizontal\">\n                <div className=\"card-image\">\n                  <img src={picture} alt={name}/>\n                </div>\n                <div className=\"card-stacked\">\n                  <div className=\"card-content\">\n                    <p>{name}</p>\n                    <p><small>PV :{hp}</small></p>\n                    <p><small>PA : {cp}</small></p>\n                    \n                  </div>\n                  <p text-align=\"center\"><small>Type : {types}</small></p>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register ();\n"],"sourceRoot":""}